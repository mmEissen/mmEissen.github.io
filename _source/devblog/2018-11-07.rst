
Designing AirPixel
==================

Most things that I try fail. As long as the cost of the failed attempts is low,
this is a good thing. If the cost of failure is high then persisting becomes
tedious.

I recently acquired a NeoPixel ring planing to do some Lighting projects with
it. They need to be controlled by a micro controler, but I found the development
process to be frustrating: Having little knowledge about arduino programing
I made many mistakes, the feedback was minimal to non-existant, the iteration
cycle extremely slow.

AirPixel is a solution to that problem.

Principle
---------

An ESP8266-01 micro controler runs a static sketch, which copys bytes from UDP
packets and interprets them as colour values for the NeoPixels. A Python client
running on a seperate device can then be used to produce the colours.

Designing a User Friendly Protocol
----------------------------------

The goal of the AirPixel package is to make prototyping applications for the
NeoPixel simple. The user should not have to care about how the underlying
protocol works. Idealy they shouldn't even be aware that UDP transmition is
happening. The focus for the user should be on *what* is displayed on the
pixels, not *how* it is displayed.

The goal of the AirPixel package is *not* to replace the micro-controler.
Using an interpreted language like Python for an application that may be 
real time dependant is not ideal. AirPixel will fall short on many aspects
that may be important for your project, like power usage, performance,
deployability, security, etc.

